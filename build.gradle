
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

repositories {
	maven {
		name 'BR Repo'
        url "http://www.teambrmodding.com/maven2/"
	}
	maven { //JEI
        name 'DVS1 Maven FS'
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'scala'

ext.configFile = file "gradle.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

String build = System.getenv("BUILD_NUMBER")

if (build == null || build == '') {
    version = "${config.minecraft_version}-${config.mod_version}"
} else {
    version = "${config.minecraft_version}-${config.mod_version}-B" + System.getenv("BUILD_NUMBER")
}

group= "com.teambr.luxetumbra" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LuxEtUmbra"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"

    mappings = "${config.MAPPINGS}"
    
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
    deployerJars
}

dependencies {
	deobfCompile "mezz.jei:jei_${config.minecraft_version}:${config.JEI_version}"
	compile group: "com.teambr.bookshelf", name: "Bookshelf-API", version: "1.10.2-3.2.2-B2", classifier: "dev"
    compile "mcp.mobius.waila:Waila:${config.WAILA_version}:dev"
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }
    extension = 'jar'
    classifier = 'dev'
}

task sourceJarScala(type: Jar, dependsOn: "classes") {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives devJar
    archives sourceJarScala
}

processResources
{
	exclude '**/Thumbs.db'
	
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
